什么是node
什么是service
什么是pod
什么是event
什么是label

node:
    除master外的其他服务器，可以是物理机，也可以是虚拟机，每个node都会被master分配一些写
    负载，当某个node宕机后，其上工作会被master自动转移到其他的node上。
    node上运行的关键进程
    kubelet：负责pod对应任务的茶ungjian，启动等，同时与master协作
    kube-porxy：实现kubernets-service的通信与负载机制服务
    容器运行：负责机器容器创建和管理
    
    查看多少个node
    kubectl get nodes
    
    查看某个node详细信息
    kubetctl descibe node  **nodeName
    通过查看详情可以知道资源问题
    diskpressure 空间是否不足
    memorypressure 内存是否不足
    networkunavailable 网络是否正常
    pidpressure pid资源是否充足
    node为ready（ready=true）为健康状态
    
    如果node为健康，master就可以在其上调度pod了
    
    当一个node出现问题是可以给这node大一个特殊标签taint（污点）避免新的容器被调度到该node上
    某些pod可以容忍（toleration）短期某种污点的存在

命名空间：
    用于实现多租户的资源隔离，例如给每个租户分配一个命名空间,命名空间属于kubernets
    集群范畴的资源对象，一个集群里可以创建多个命名空间，每个命名空间都是相互独立存在
    属于不同命名空间的资源对象从逻辑上相互隔离，naster运行后会自动创建2个命名空间
    一个是默认的（default），一个是系统级的(kube-system),用户创建资源如果没有指定命名空间
    就会放在default命名空间中，系统相关的资源对象如网络，dns组建，监控类组建都会放在系统
    空间中

    配置文件中的
    namespalce:development #放在development空间

    查看命名空间信息
    kubectl get pods --namespace=development

Service：
    service是指无状态的服务,kubernets里的service是指具有全局唯一的虚拟机clusterip地址
    service一旦被创建，kubernets就会自动为他分配一个可用的clusterip地址，且在service的
    整个生命周期中。他的clusterip都不会变，客户端可以通过虚拟ip=服务端口直接访问
    通过kubernets集群的dns服务，可以实现service name到clusterip地址的dns映射，完成后
    可以实现只使用服务名完成到service的访问

Pod:
    每个pod都一个特殊的“根容器”pause容器，该容器对应的镜像属于kubernets平台一部分
    除此之外还包含很多用户业务的容器

    产生pod的原因：
        为多进程间的协作提供一个抽象模型，使用pod作为基本的调度，复制等管理操作最小单元
        ，让多个应用进程能一起有效的调度和伸缩
        多个业务容器共享pause容器的ip，共享pause容器挂载的volume,简化了容器间的通信问题
        解决了，业务容器间的文件共享问题
    kubernets为每个pod分配了唯一的ip地址：pod ip，一个pod内的容器共享pod id，kubnernets
    要求集群内任意2个pod间的tcp/ip直接通信

    注意：pod里的容器与另外主机上的pod容器能够直接通信

    分类：静态pod(static pod),普通pod，静态pod没有放在etcd中，放在某个具体的node上的文件中
    普通pod一旦被创建就会放入到etcd中，当pod中的某个container停止是，kubernents会自动检测
    遇到这个问题并重新启动这个pod，如果pod所在的node宕机，就将该node上的所有pod都重新调度到
    其他node上
    
    pod的定义在配置文件中
    kind: Pod
    表示资源类型为pod，

    endpoint：
        表示pod中一个服务进程对外通信地址，一个pod中存在很多endpoint情况
    
    pod volume:
        被挂载到pod的文件目录

Event:
    是一个事件的记录,记录了事件的最早产生时间，最后重现时间，重试次数，发起者，
    类型，以及导致该事件的原因

    通常会被关联到某个具体资源对象上，排查故障的重要手段，pod同样有evnet记录

    通过kubectl descibe pod xxx 查看信息的唵尾问题


label:
    是pod的重要属性之一，重要性仅次于端口
    一个label是一个key=value键值对
    label可以放在node，pod，service，deployment上
    一般在资源对象定义时确定，也可以在对象创建后动态添加和删除

    常用的标签
    版本标签：release:stable,release:canary
    环境标签: enviroment:dev，enviroment:qa和enviroment:producation
    架构标签: tier:frontend,tier:backend,tier:middleware
    分区标签: partition:customerA和partition:customerB
    质量管控标签: track:daily和track:weekly
    
    注意:要将应用和service的标签保持一致
    
    使用deployment创建应用，相当于使用pod模板
    配置文件中使用
    labels

使用pod
需要提供一个模板使用
deployment资源对象要做的

定义副本数，选择器，模板

    apiVersion: apps/v1 #api版本
      kind: Deployment #副本控制器
    metadata: 
      labels: #标签
        app: myweb
      name: myweb #对象全局唯一
    spec:
      replicas: 1 #pod预期副本数
      selector:   #目标pod的标签选择器
        matchLabels:
          app: myweb
          tier: backend
        matchExpressions:
          - [key: tier,operation: In,values:[backend]]
      template: #自动创建pod副本的模版
        metadata: 
          labels:
            app: myweb
            tier: backend
        spec:
          containers: #定义容器
            - image: golang:1.19.8-alpine
              imagePullPolicy: IfNotPresent
              name: myweb
              ports:
              - containerPort: 8080

创建使用
kubectl create -f myweb-deploy.yaml
查看
kubectl get deployments
